[
  {
      "id": "e9c73e03.dd036",
      "type": "tab",
      "label": "LoRaWAN REST",
      "disabled": true,
      "info": "Flow in charge of handling the HTTP REST requests fowarded by the LoRa Server.\nIt will transform the messages to the correspondent json-schema."
  },
  {
      "id": "8b8342cf.39433",
      "type": "tab",
      "label": "LoRaWAN MQTT",
      "disabled": false,
      "info": "Flow in charge of handling the MQTT messages fowarded by the LoRa Server.\nIt will transform the messages to the correspondent json-schema."
  },
  {
      "id": "75747c34.950644",
      "type": "tab",
      "label": "DataFlow",
      "disabled": false,
      "info": ""
  },
  {
      "id": "11cdd89d.420ba7",
      "type": "tab",
      "label": "Dasboard",
      "disabled": false,
      "info": ""
  },
  {
      "id": "608d2d15.8c7f44",
      "type": "moduleclient",
      "z": ""
  },
  {
      "id": "3f77ef05.865e1",
      "type": "mqtt-broker",
      "z": "",
      "name": "LoRa Broker",
      "broker": "192.168.1.72",
      "port": "1883",
      "clientid": "",
      "usetls": false,
      "compatmode": true,
      "keepalive": "60",
      "cleansession": true,
      "birthTopic": "",
      "birthQos": "0",
      "birthPayload": "",
      "closeTopic": "",
      "closeQos": "0",
      "closePayload": "",
      "willTopic": "",
      "willQos": "0",
      "willPayload": ""
  },
  {
      "id": "331b1283.e8b0de",
      "type": "postgresdb",
      "z": "",
      "hostname": "postgres",
      "port": "5432",
      "db": "aaas_db",
      "ssl": false
  },
  {
      "id": "7a265855.52c238",
      "type": "ui_base",
      "theme": {
          "name": "theme-dark",
          "lightTheme": {
              "default": "#0094CE",
              "baseColor": "#0094CE",
              "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
              "edited": true,
              "reset": false
          },
          "darkTheme": {
              "default": "#097479",
              "baseColor": "#097479",
              "baseFont": "Verdana,Verdana,Geneva,sans-serif",
              "edited": true,
              "reset": false
          },
          "customTheme": {
              "name": "Untitled Theme 1",
              "default": "#4B7930",
              "baseColor": "#4B7930",
              "baseFont": "Verdana,Verdana,Geneva,sans-serif",
              "reset": false
          },
          "themeState": {
              "base-color": {
                  "default": "#097479",
                  "value": "#097479",
                  "edited": false
              },
              "page-titlebar-backgroundColor": {
                  "value": "#097479",
                  "edited": false
              },
              "page-backgroundColor": {
                  "value": "#111111",
                  "edited": false
              },
              "page-sidebar-backgroundColor": {
                  "value": "#000000",
                  "edited": false
              },
              "group-textColor": {
                  "value": "#0eb8c0",
                  "edited": false
              },
              "group-borderColor": {
                  "value": "#555555",
                  "edited": false
              },
              "group-backgroundColor": {
                  "value": "#333333",
                  "edited": false
              },
              "widget-textColor": {
                  "value": "#eeeeee",
                  "edited": false
              },
              "widget-backgroundColor": {
                  "value": "#097479",
                  "edited": false
              },
              "widget-borderColor": {
                  "value": "#333333",
                  "edited": false
              },
              "base-font": {
                  "value": "Verdana,Verdana,Geneva,sans-serif"
              }
          },
          "angularTheme": {
              "primary": "indigo",
              "accents": "blue",
              "warn": "red",
              "background": "grey"
          }
      },
      "site": {
          "name": "AAAS Dashboard",
          "hideToolbar": "false",
          "allowSwipe": "true",
          "lockMenu": "false",
          "allowTempTheme": "true",
          "dateFormat": "DD/MM/YYYY",
          "sizes": {
              "sx": 48,
              "sy": 48,
              "gx": 6,
              "gy": 6,
              "cx": 6,
              "cy": 6,
              "px": 0,
              "py": 0
          }
      }
  },
  {
      "id": "c147e111.33d6a",
      "type": "ui_tab",
      "z": "",
      "name": "Dashboard",
      "icon": "dashboard",
      "order": 1,
      "disabled": false,
      "hidden": false
  },
  {
      "id": "dd6512cc.2c87",
      "type": "ui_group",
      "z": "",
      "name": "dasboard_common",
      "tab": "c147e111.33d6a",
      "disp": false,
      "width": "24",
      "collapse": false
  },
  {
      "id": "3121185a.d6aa28",
      "type": "ui_link",
      "z": "",
      "name": "Public App",
      "link": "http://google.com",
      "icon": "open_in_browser",
      "target": "iframe",
      "order": 4
  },
  {
      "id": "eef82205.89c55",
      "type": "ui_group",
      "z": "",
      "name": "Status",
      "tab": "c147e111.33d6a",
      "order": 2,
      "disp": true,
      "width": "24",
      "collapse": false
  },
  {
      "id": "b82248d0.3e1838",
      "type": "mqtt-broker",
      "z": "",
      "name": "Node-RED",
      "broker": "192.168.1.72",
      "port": "1883",
      "clientid": "Node-RED",
      "usetls": false,
      "compatmode": true,
      "keepalive": "60",
      "cleansession": true,
      "birthTopic": "",
      "birthQos": "0",
      "birthPayload": "",
      "closeTopic": "",
      "closeQos": "0",
      "closePayload": "",
      "willTopic": "",
      "willQos": "0",
      "willPayload": ""
  },
  {
      "id": "d762e903.99ee28",
      "type": "ui_group",
      "z": "",
      "name": "Home",
      "tab": "",
      "disp": true,
      "width": "6",
      "collapse": false
  },
  {
      "id": "46027593.0cb54c",
      "type": "ui_group",
      "z": "",
      "name": "Debug",
      "tab": "",
      "disp": true,
      "width": "6",
      "collapse": false
  },
  {
      "id": "fa2a6ddd.fe271",
      "type": "ui_group",
      "z": "",
      "name": "LED Testing",
      "tab": "",
      "disp": true,
      "width": "4"
  },
  {
      "id": "60a461b9.b7ab5",
      "type": "ui_group",
      "z": "",
      "name": "Plant",
      "tab": "c147e111.33d6a",
      "order": 3,
      "disp": true,
      "width": "24",
      "collapse": false
  },
  {
      "id": "efc9ccea.9f51d",
      "type": "ui_tab",
      "z": "",
      "name": "Plant",
      "icon": "dashboard",
      "order": 2,
      "disabled": false,
      "hidden": false
  },
  {
      "id": "fa3aceea.b40d9",
      "type": "ui_tab",
      "z": "",
      "name": "Weather",
      "icon": "dashboard",
      "order": 3,
      "disabled": false,
      "hidden": false
  },
  {
      "id": "8f100936.36f3d8",
      "type": "ui_group",
      "z": "",
      "name": "TimeSerie",
      "tab": "efc9ccea.9f51d",
      "order": 2,
      "disp": false,
      "width": "24",
      "collapse": false
  },
  {
      "id": "8ba983fd.7b53a",
      "type": "ui_group",
      "z": "",
      "name": "Summary",
      "tab": "efc9ccea.9f51d",
      "order": 1,
      "disp": false,
      "width": "24",
      "collapse": false
  },
  {
      "id": "edaea15.b7ea56",
      "type": "ui_group",
      "z": "",
      "name": "Summary",
      "tab": "fa3aceea.b40d9",
      "order": 1,
      "disp": false,
      "width": "24",
      "collapse": false
  },
  {
      "id": "ead5bedf.62555",
      "type": "ui_group",
      "z": "",
      "name": "TimeSerie",
      "tab": "fa3aceea.b40d9",
      "order": 2,
      "disp": false,
      "width": "24",
      "collapse": false
  },
  {
      "id": "30515ba9.8ca954",
      "type": "ui_group",
      "z": "",
      "name": "Weather",
      "tab": "c147e111.33d6a",
      "order": 4,
      "disp": true,
      "width": "24",
      "collapse": false
  },
  {
      "id": "21b345f7.4de84a",
      "type": "ui_group",
      "z": "",
      "name": "Alerts",
      "tab": "c147e111.33d6a",
      "order": 5,
      "disp": true,
      "width": "24",
      "collapse": false
  },
  {
      "id": "a32d6765.fbb618",
      "type": "ui_group",
      "z": "",
      "name": "Current",
      "tab": "efc9ccea.9f51d",
      "order": 3,
      "disp": true,
      "width": "24",
      "collapse": false
  },
  {
      "id": "894b0e18.2190b",
      "type": "ui_group",
      "z": "",
      "name": "Alerts",
      "tab": "efc9ccea.9f51d",
      "order": 4,
      "disp": true,
      "width": "24",
      "collapse": false
  },
  {
      "id": "816c5956.92de08",
      "type": "ui_group",
      "z": "",
      "name": "Current",
      "tab": "fa3aceea.b40d9",
      "order": 3,
      "disp": true,
      "width": "24",
      "collapse": false
  },
  {
      "id": "6910c1e.662dc4",
      "type": "ui_group",
      "z": "",
      "name": "Alerts",
      "tab": "fa3aceea.b40d9",
      "order": 4,
      "disp": true,
      "width": "24",
      "collapse": false
  },
  {
      "id": "aba26ec4.f57be",
      "type": "http in",
      "z": "e9c73e03.dd036",
      "name": "LoRa Data",
      "url": "/lora/data",
      "method": "post",
      "upload": false,
      "swaggerDoc": "",
      "x": 100,
      "y": 120,
      "wires": [
          [
              "25860335.23a01c",
              "3146bf73.808f8"
          ]
      ]
  },
  {
      "id": "3146bf73.808f8",
      "type": "http response",
      "z": "e9c73e03.dd036",
      "name": "HTTP Response",
      "statusCode": "200",
      "headers": {},
      "x": 320,
      "y": 200,
      "wires": []
  },
  {
      "id": "25860335.23a01c",
      "type": "function",
      "z": "e9c73e03.dd036",
      "name": "Process Data Message",
      "func": "//message content\nconst TYPE = \"DATA\";\nvar result = {};\nvar data = {};\ndata.type = TYPE;\ndata.application = msg.payload.applicationName;\ndata.gateway = msg.payload.rxInfo[0].name;\ndata.gateway_id = msg.payload.rxInfo[0].gatewayID;\ndata.device = msg.payload.deviceName;\ndata.device_id = msg.payload.devEUI;\ndata.device_type = msg.payload.object.type;\ndata.data = msg.payload.object;\ndata.gateway_time= msg.payload.rxInfo[0].time;\ndata.edge_time = new Date().toISOString();\n\nresult.payload = data;\n\nreturn result;",
      "outputs": 1,
      "noerr": 0,
      "x": 370,
      "y": 60,
      "wires": [
          [
              "77b23dbd.ef50d4",
              "3b9c5762.5a2ab8"
          ]
      ]
  },
  {
      "id": "fe8dfd57.e4755",
      "type": "http in",
      "z": "e9c73e03.dd036",
      "name": "LoRa Join",
      "url": "/lora/join",
      "method": "post",
      "upload": false,
      "swaggerDoc": "",
      "x": 100,
      "y": 280,
      "wires": [
          [
              "6c8c046.512c1fc",
              "3146bf73.808f8"
          ]
      ]
  },
  {
      "id": "6c8c046.512c1fc",
      "type": "function",
      "z": "e9c73e03.dd036",
      "name": "Process Join Message",
      "func": "//message content\nconst TYPE = \"JOIN\";\n\nvar result = {};\nvar data = {};\ndata.data = msg.payload.object;\ndata.application = msg.payload.applicationName;\ndata.device = msg.payload.deviceName;\ndata.device_id = msg.payload.devEUI;\ndata.type = TYPE;\nresult.payload = data;\n\nreturn result;",
      "outputs": 1,
      "noerr": 0,
      "x": 360,
      "y": 360,
      "wires": [
          [
              "77b23dbd.ef50d4",
              "3b9c5762.5a2ab8"
          ]
      ]
  },
  {
      "id": "77b23dbd.ef50d4",
      "type": "debug",
      "z": "e9c73e03.dd036",
      "name": "Message",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "payload",
      "targetType": "msg",
      "x": 520,
      "y": 200,
      "wires": []
  },
  {
      "id": "3b9c5762.5a2ab8",
      "type": "moduleoutput",
      "z": "e9c73e03.dd036",
      "client": "608d2d15.8c7f44",
      "output": "output1",
      "x": 770,
      "y": 200,
      "wires": []
  },
  {
      "id": "bbffcb53.15f3b8",
      "type": "function",
      "z": "8b8342cf.39433",
      "name": "Process Data Message",
      "func": "//message content\nconst TYPE = \"DATA\";\nvar result = {};\nvar data = {};\ndata.type = TYPE;\ndata.application = msg.payload.applicationName;\ndata.gateway = msg.payload.rxInfo[0].name;\ndata.gateway_id = msg.payload.rxInfo[0].gatewayID;\ndata.device = msg.payload.deviceName;\ndata.device_id = msg.payload.devEUI;\ndata.device_type = msg.payload.object.type;\ndata.data = msg.payload.object;\ndata.gateway_time= msg.payload.rxInfo[0].time;\ndata.edge_time = new Date().toISOString();\n\nresult.payload = data;\n\nreturn result;",
      "outputs": 1,
      "noerr": 0,
      "x": 410,
      "y": 100,
      "wires": [
          [
              "b518a7cb.6d0a18",
              "ea49fc82.c0407"
          ]
      ]
  },
  {
      "id": "1e044bd7.ce59d4",
      "type": "function",
      "z": "8b8342cf.39433",
      "name": "Process Join Message",
      "func": "//message content\nconst TYPE = \"JOIN\";\n\nvar result = {};\nvar data = {};\ndata.data = msg.payload.object;\ndata.application = msg.payload.applicationName;\ndata.device = msg.payload.deviceName;\ndata.device_id = msg.payload.devEUI;\ndata.type = TYPE;\nresult.payload = data;\n\nreturn result;",
      "outputs": 1,
      "noerr": 0,
      "x": 420,
      "y": 300,
      "wires": [
          [
              "b518a7cb.6d0a18",
              "ea49fc82.c0407"
          ]
      ]
  },
  {
      "id": "b518a7cb.6d0a18",
      "type": "debug",
      "z": "8b8342cf.39433",
      "name": "Message",
      "active": false,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "payload",
      "targetType": "msg",
      "x": 680,
      "y": 60,
      "wires": []
  },
  {
      "id": "ea49fc82.c0407",
      "type": "moduleoutput",
      "z": "8b8342cf.39433",
      "client": "608d2d15.8c7f44",
      "output": "output1",
      "x": 770,
      "y": 200,
      "wires": []
  },
  {
      "id": "8caf55d9.47d6e8",
      "type": "mqtt in",
      "z": "8b8342cf.39433",
      "name": "MQTT Request",
      "topic": "application/#",
      "qos": "2",
      "datatype": "json",
      "broker": "3f77ef05.865e1",
      "x": 100,
      "y": 220,
      "wires": [
          [
              "d8dd447a.caf038",
              "5bfdd812.b4b488"
          ]
      ]
  },
  {
      "id": "d8dd447a.caf038",
      "type": "debug",
      "z": "8b8342cf.39433",
      "name": "MQTT Message",
      "active": false,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "true",
      "targetType": "full",
      "x": 160,
      "y": 120,
      "wires": []
  },
  {
      "id": "5bfdd812.b4b488",
      "type": "switch",
      "z": "8b8342cf.39433",
      "name": "",
      "property": "topic",
      "propertyType": "msg",
      "rules": [
          {
              "t": "cont",
              "v": "rx",
              "vt": "str"
          },
          {
              "t": "cont",
              "v": "join",
              "vt": "str"
          }
      ],
      "checkall": "true",
      "repair": false,
      "outputs": 2,
      "x": 320,
      "y": 220,
      "wires": [
          [
              "bbffcb53.15f3b8"
          ],
          [
              "1e044bd7.ce59d4"
          ]
      ]
  },
  {
      "id": "b454d439.2bdc18",
      "type": "moduleinput",
      "z": "8b8342cf.39433",
      "client": "608d2d15.8c7f44",
      "input": "command",
      "x": 160,
      "y": 480,
      "wires": [
          [
              "768229fd.529ea8",
              "f0035a06.965398"
          ]
      ]
  },
  {
      "id": "768229fd.529ea8",
      "type": "debug",
      "z": "8b8342cf.39433",
      "name": "Input Message",
      "active": false,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "payload",
      "targetType": "msg",
      "x": 320,
      "y": 420,
      "wires": []
  },
  {
      "id": "f0035a06.965398",
      "type": "function",
      "z": "8b8342cf.39433",
      "name": "Process Command",
      "func": "var data = msg.payload;\nconst TOPIC = 'application/2/device/{device_id}/tx';\n\nvar loraMessage = {};\nvar topic; \nif (data.command && data.value && data.device_id) {\n    loraMessage.confirmed = false;\n    loraMessage.fPort =  10;\n    let content = data.command +':'+data.value;\n    loraMessage.data = new Buffer(content).toString('base64');\n\n    topic = TOPIC.replace('{device_id}',data.device_id);\n}\n\nif (topic) {\nmsg.payload = loraMessage;\nmsg.topic = topic;\nreturn msg;    \n}\n",
      "outputs": 1,
      "noerr": 0,
      "x": 470,
      "y": 480,
      "wires": [
          [
              "391bb3ef.23e47c",
              "2f54f772.368f98"
          ]
      ]
  },
  {
      "id": "391bb3ef.23e47c",
      "type": "debug",
      "z": "8b8342cf.39433",
      "name": "MQTT Command",
      "active": false,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "true",
      "targetType": "full",
      "x": 650,
      "y": 420,
      "wires": []
  },
  {
      "id": "2f54f772.368f98",
      "type": "mqtt out",
      "z": "8b8342cf.39433",
      "name": "",
      "topic": "",
      "qos": "",
      "retain": "",
      "broker": "3f77ef05.865e1",
      "x": 710,
      "y": 480,
      "wires": []
  },
  {
      "id": "eafcef7c.31ead",
      "type": "comment",
      "z": "8b8342cf.39433",
      "name": "Uplink Message",
      "info": "",
      "x": 180,
      "y": 60,
      "wires": []
  },
  {
      "id": "e33afea8.1283f",
      "type": "comment",
      "z": "8b8342cf.39433",
      "name": "Downlink Message",
      "info": "",
      "x": 190,
      "y": 360,
      "wires": []
  },
  {
      "id": "bbcba078.b1a1f",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "dd6512cc.2c87",
      "order": 0,
      "width": "24",
      "height": "1",
      "name": "",
      "label": "",
      "format": "{{msg.payload}}",
      "layout": "col-center",
      "x": 490,
      "y": 80,
      "wires": []
  },
  {
      "id": "c95d16e8.466af8",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "eef82205.89c55",
      "order": 1,
      "width": "4",
      "height": "2",
      "name": "",
      "label": "Plant Status",
      "format": "<font color={{msg.data.color}} ><i class=\"fa fa-circle\" style=\"font-size:24px;\"></i></font>",
      "layout": "col-center",
      "x": 510,
      "y": 1240,
      "wires": []
  },
  {
      "id": "a7b245aa.a1e238",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "eef82205.89c55",
      "order": 3,
      "width": "4",
      "height": "2",
      "name": "",
      "label": "Weather Status",
      "format": "<font color={{msg.data.color}} ><i class=\"fa fa-circle\" style=\"font-size:24px;\"></i></font>",
      "layout": "col-center",
      "x": 520,
      "y": 1080,
      "wires": []
  },
  {
      "id": "9f80c5e3.3fc328",
      "type": "ui_chart",
      "z": "11cdd89d.420ba7",
      "name": "PlantRealTime",
      "group": "8f100936.36f3d8",
      "order": 0,
      "width": "24",
      "height": "4",
      "label": "Last Measures",
      "chartType": "line",
      "legend": "true",
      "xformat": "dd HH:mm",
      "interpolate": "linear",
      "nodata": "",
      "dot": false,
      "ymin": "",
      "ymax": "",
      "removeOlder": 1,
      "removeOlderPoints": "",
      "removeOlderUnit": "3600",
      "cutout": 0,
      "useOneColor": false,
      "colors": [
          "#1f77b4",
          "#aec7e8",
          "#ff7f0e",
          "#2ca02c",
          "#98df8a",
          "#d62728",
          "#ff9896",
          "#9467bd",
          "#c5b0d5"
      ],
      "useOldStyle": false,
      "outputs": 1,
      "x": 1100,
      "y": 220,
      "wires": [
          []
      ]
  },
  {
      "id": "44e6b2fa.63765c",
      "type": "inject",
      "z": "11cdd89d.420ba7",
      "name": "",
      "topic": "",
      "payload": "",
      "payloadType": "date",
      "repeat": "",
      "crontab": "",
      "once": false,
      "onceDelay": 0.1,
      "x": 580,
      "y": 280,
      "wires": [
          [
              "388b2dc8.a1e3c2"
          ]
      ]
  },
  {
      "id": "388b2dc8.a1e3c2",
      "type": "function",
      "z": "11cdd89d.420ba7",
      "name": "Clean",
      "func": "msg.payload = [];\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 770,
      "y": 280,
      "wires": [
          [
              "2ab53122.adde5e"
          ]
      ]
  },
  {
      "id": "bdbdcf0.611ff3",
      "type": "ui_chart",
      "z": "11cdd89d.420ba7",
      "name": "PlantSummary",
      "group": "8ba983fd.7b53a",
      "order": 0,
      "width": "24",
      "height": "4",
      "label": "Summary (Last Week)",
      "chartType": "bar",
      "legend": "true",
      "xformat": "HH:mm:ss",
      "interpolate": "linear",
      "nodata": "",
      "dot": false,
      "ymin": "",
      "ymax": "",
      "removeOlder": 1,
      "removeOlderPoints": "",
      "removeOlderUnit": "3600",
      "cutout": 0,
      "useOneColor": false,
      "colors": [
          "#1f77b4",
          "#aec7e8",
          "#ff7f0e",
          "#2ca02c",
          "#98df8a",
          "#d62728",
          "#ff9896",
          "#9467bd",
          "#c5b0d5"
      ],
      "useOldStyle": false,
      "outputs": 1,
      "x": 1040,
      "y": 120,
      "wires": [
          []
      ]
  },
  {
      "id": "b182f905.f2a008",
      "type": "ui_chart",
      "z": "11cdd89d.420ba7",
      "name": "WeatherSummary",
      "group": "edaea15.b7ea56",
      "order": 0,
      "width": "24",
      "height": "4",
      "label": "Summary (Last Week)",
      "chartType": "bar",
      "legend": "true",
      "xformat": "HH:mm:ss",
      "interpolate": "linear",
      "nodata": "",
      "dot": false,
      "ymin": "",
      "ymax": "",
      "removeOlder": 1,
      "removeOlderPoints": "",
      "removeOlderUnit": "3600",
      "cutout": 0,
      "useOneColor": false,
      "colors": [
          "#1f77b4",
          "#aec7e8",
          "#ff7f0e",
          "#2ca02c",
          "#98df8a",
          "#d62728",
          "#ff9896",
          "#9467bd",
          "#c5b0d5"
      ],
      "useOldStyle": false,
      "outputs": 1,
      "x": 1050,
      "y": 60,
      "wires": [
          []
      ]
  },
  {
      "id": "2ab53122.adde5e",
      "type": "ui_chart",
      "z": "11cdd89d.420ba7",
      "name": "WeatherRealTime",
      "group": "ead5bedf.62555",
      "order": 0,
      "width": "24",
      "height": "4",
      "label": "Last Measures",
      "chartType": "line",
      "legend": "true",
      "xformat": "dd HH:mm",
      "interpolate": "linear",
      "nodata": "",
      "dot": false,
      "ymin": "",
      "ymax": "",
      "removeOlder": 1,
      "removeOlderPoints": "",
      "removeOlderUnit": "3600",
      "cutout": 0,
      "useOneColor": false,
      "colors": [
          "#1f77b4",
          "#aec7e8",
          "#ff7f0e",
          "#2ca02c",
          "#98df8a",
          "#d62728",
          "#ff9896",
          "#9467bd",
          "#c5b0d5"
      ],
      "useOldStyle": false,
      "outputs": 1,
      "x": 1110,
      "y": 180,
      "wires": [
          []
      ]
  },
  {
      "id": "d7e91699.e53d38",
      "type": "ui_gauge",
      "z": "11cdd89d.420ba7",
      "name": "WeatherTemperature",
      "group": "30515ba9.8ca954",
      "order": 1,
      "width": "3",
      "height": "2",
      "gtype": "gage",
      "title": "Temperature",
      "label": "ºC",
      "format": "{{msg.data.temperature}}",
      "min": "-10",
      "max": "50",
      "colors": [
          "#00b500",
          "#e6e600",
          "#ca3838"
      ],
      "seg1": "",
      "seg2": "",
      "x": 1420,
      "y": 140,
      "wires": []
  },
  {
      "id": "c369fc.3d9e4608",
      "type": "ui_gauge",
      "z": "11cdd89d.420ba7",
      "name": "WeatherHumidity",
      "group": "30515ba9.8ca954",
      "order": 2,
      "width": "3",
      "height": "2",
      "gtype": "gage",
      "title": "Humidity",
      "label": "%",
      "format": "{{msg.data.humidity}}",
      "min": "0",
      "max": "100",
      "colors": [
          "#b54739",
          "#24e636",
          "#ca3838"
      ],
      "seg1": "",
      "seg2": "",
      "x": 1410,
      "y": 220,
      "wires": []
  },
  {
      "id": "3e6867d3.467dd8",
      "type": "ui_gauge",
      "z": "11cdd89d.420ba7",
      "name": "WeatherPressure",
      "group": "30515ba9.8ca954",
      "order": 3,
      "width": "3",
      "height": "2",
      "gtype": "gage",
      "title": "Pressure",
      "label": "hPa",
      "format": "{{msg.data.pressure}}",
      "min": "900",
      "max": "110",
      "colors": [
          "#b52125",
          "#46e647",
          "#ca3838"
      ],
      "seg1": "",
      "seg2": "",
      "x": 1410,
      "y": 300,
      "wires": []
  },
  {
      "id": "718b829e.cf9c4c",
      "type": "ui_gauge",
      "z": "11cdd89d.420ba7",
      "name": "WeatherRain",
      "group": "30515ba9.8ca954",
      "order": 4,
      "width": "3",
      "height": "2",
      "gtype": "gage",
      "title": "Rain",
      "label": "Intensity",
      "format": "{{msg.data.rain}}",
      "min": "0",
      "max": "100",
      "colors": [
          "#00b500",
          "#e6e600",
          "#ca3838"
      ],
      "seg1": "",
      "seg2": "",
      "x": 1390,
      "y": 380,
      "wires": []
  },
  {
      "id": "7a00fa6c.4c7094",
      "type": "ui_gauge",
      "z": "11cdd89d.420ba7",
      "name": "WeatherLight",
      "group": "30515ba9.8ca954",
      "order": 5,
      "width": "3",
      "height": "2",
      "gtype": "gage",
      "title": "Light",
      "label": "Intensity",
      "format": "{{msg.data.light}}",
      "min": "0",
      "max": "4000",
      "colors": [
          "#00b500",
          "#e6e600",
          "#ca3838"
      ],
      "seg1": "",
      "seg2": "",
      "x": 1390,
      "y": 460,
      "wires": []
  },
  {
      "id": "7ee082eb.591efc",
      "type": "ui_gauge",
      "z": "11cdd89d.420ba7",
      "name": "WeatherUV",
      "group": "30515ba9.8ca954",
      "order": 6,
      "width": "3",
      "height": "2",
      "gtype": "gage",
      "title": "UV",
      "label": "UV",
      "format": "{{msg.data.uv}}",
      "min": "0",
      "max": "10",
      "colors": [
          "#00b500",
          "#e6e600",
          "#ca3838"
      ],
      "seg1": "",
      "seg2": "",
      "x": 1390,
      "y": 540,
      "wires": []
  },
  {
      "id": "8eb5619.0d6e8a",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "30515ba9.8ca954",
      "order": 7,
      "width": "6",
      "height": "2",
      "name": "WeatherLastUpdated",
      "label": "Last Updated",
      "format": "{{msg.data.timestamp}}",
      "layout": "col-center",
      "x": 1420,
      "y": 620,
      "wires": []
  },
  {
      "id": "d5ebab47.ea9db8",
      "type": "ui_toast",
      "z": "11cdd89d.420ba7",
      "position": "top right",
      "displayTime": "10",
      "highlight": "yellow",
      "outputs": 0,
      "ok": "OK",
      "cancel": "",
      "topic": "",
      "name": "Alert",
      "x": 710,
      "y": 760,
      "wires": []
  },
  {
      "id": "e290f47f.3e3e28",
      "type": "ui_gauge",
      "z": "11cdd89d.420ba7",
      "name": "PlantTemperature",
      "group": "60a461b9.b7ab5",
      "order": 1,
      "width": "3",
      "height": "2",
      "gtype": "gage",
      "title": "Temperature",
      "label": "ºC",
      "format": "{{msg.data.temperature}}",
      "min": "-10",
      "max": "50",
      "colors": [
          "#00b500",
          "#e6e600",
          "#ca3838"
      ],
      "seg1": "",
      "seg2": "",
      "x": 1410,
      "y": 740,
      "wires": []
  },
  {
      "id": "13a566d.80eb499",
      "type": "ui_gauge",
      "z": "11cdd89d.420ba7",
      "name": "PlantHumidity",
      "group": "60a461b9.b7ab5",
      "order": 2,
      "width": "3",
      "height": "2",
      "gtype": "gage",
      "title": "Humidity",
      "label": "%",
      "format": "{{msg.data.humidity}}",
      "min": "0",
      "max": "100",
      "colors": [
          "#ffd479",
          "#009051",
          "#ca3838"
      ],
      "seg1": "",
      "seg2": "",
      "x": 1400,
      "y": 820,
      "wires": []
  },
  {
      "id": "14c31def.bed932",
      "type": "ui_gauge",
      "z": "11cdd89d.420ba7",
      "name": "PlantSoilMoisture",
      "group": "60a461b9.b7ab5",
      "order": 3,
      "width": "3",
      "height": "2",
      "gtype": "gage",
      "title": "Soil Moisture",
      "label": "%",
      "format": "{{msg.data.sm}}",
      "min": "0",
      "max": "100",
      "colors": [
          "#ff9300",
          "#009051",
          "#ca3838"
      ],
      "seg1": "",
      "seg2": "",
      "x": 1410,
      "y": 900,
      "wires": []
  },
  {
      "id": "7255e0cf.e6ed8",
      "type": "ui_gauge",
      "z": "11cdd89d.420ba7",
      "name": "PlantLight",
      "group": "60a461b9.b7ab5",
      "order": 4,
      "width": "3",
      "height": "2",
      "gtype": "gage",
      "title": "Light",
      "label": "Intensity",
      "format": "{{msg.data.light}}",
      "min": "0",
      "max": "400",
      "colors": [
          "#008f00",
          "#008f00",
          "#ca3838"
      ],
      "seg1": "",
      "seg2": "",
      "x": 1380,
      "y": 980,
      "wires": []
  },
  {
      "id": "502bc06e.29f07",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "60a461b9.b7ab5",
      "order": 5,
      "width": "4",
      "height": "2",
      "name": "PlantLastUpdated",
      "label": "Last Updated",
      "format": "{{msg.data.timestamp}}",
      "layout": "col-center",
      "x": 1410,
      "y": 1060,
      "wires": []
  },
  {
      "id": "11d14468.4d1a8c",
      "type": "template",
      "z": "11cdd89d.420ba7",
      "name": "css",
      "field": "style",
      "fieldType": "msg",
      "format": "html",
      "syntax": "mustache",
      "template": "table {\n    color: #333;\n    font-family: Helvetica, Arial, sans-serif;\n    width: 100%;\n    border-collapse: collapse;\n    border-spacing: 0;\n}\ntd, th {\n    border: 1px solid transparent;\n    /* No more visible border */\n    height: 30px;\n    transition: all 0.3s;\n    /* Simple transition for hover effect */\n}\nth {\n    background: #DFDFDF;\n    /* Darken header a bit */\n    font-weight: bold;\n}\ntd {\n    background: #FAFAFA;\n    text-align: center;\n}\n\n/* Cells in even rows (2,4,6...) are one color */\n\ntr:nth-child(even) td {\n    background: #F1F1F1;\n}\n\n/* Cells in odd rows (1,3,5...) are another (excludes header cells)  */\n\ntr:nth-child(odd) td {\n    background: #FEFEFE;\n}\ntr td:hover {\n    background: #666;\n    color: #FFF;\n}\n\n/* Hover cell effect! */",
      "x": 590,
      "y": 860,
      "wires": [
          [
              "e4e34b4a.4efc28"
          ]
      ]
  },
  {
      "id": "e4e34b4a.4efc28",
      "type": "ui_template",
      "z": "11cdd89d.420ba7",
      "group": "894b0e18.2190b",
      "name": "Plant Alerts",
      "order": 0,
      "width": "24",
      "height": "6",
      "format": "<style>\n    {{msg.style}}\n</style>\n\n<table>\n  <tr ng-repeat=\"obj in msg.payload\">\n    <td>{{ obj.device }}</td>\n    <td>{{ obj.message }}</td>\n    <td>{{ obj.timestamp }}</td>\n  </tr>\n</table>",
      "storeOutMessages": true,
      "fwdInMessages": true,
      "templateScope": "local",
      "x": 810,
      "y": 860,
      "wires": [
          []
      ]
  },
  {
      "id": "16da5e9.be331a1",
      "type": "function",
      "z": "11cdd89d.420ba7",
      "name": "processAlerts",
      "func": "const MAX_ALERTS = 5;\n\nfunction processAlerts(data,type) {\n    var messageData = flow.get(\"alerts_\"+type)||[];\n    node.warn(\"alerts_\"+type+'->'+messageData.length);\n    if (data.length>0) {\n    if (data.length>MAX_ALERTS) {\n        messageData = data.slice(0,MAX_ALERTS);\n    } else {\n        if ((data.length+messageData.length)>MAX_ALERTS) {\n            \n            messageData = messageData.slice(0, data.length - MAX_ALERTS+1);\n        }    \n        for (const val of data) {\n            messageData.unshift(val);\n        }\n        \n    }\n    }\n    node.warn(\"+alerts_\"+type+'->'+data.length);\n    node.warn(\"=alerts_\"+type+'->'+messageData.length);\n    flow.set(\"alerts_\"+type,messageData);\n    return messageData;\n}\n\nvar msgWEATHERALERT;\nvar msgTOTAL;\nvar msgPLANTALERT;\nif (msg.WEATHER) {\n    msgWEATHERALERT = {};\n    msgWEATHERALERT.payload = processAlerts(msg.WEATHER,'WEATHER'); \n    \n}\nif (msg.PLANT) {\n    msgPLANTALERT = {};\n    msgPLANTALERT.payload = processAlerts(msg.PLANT,'PLANT'); \n}\n\nif (msg.payload) {\n    msgTOTAL = {}\n    msgTOTAL.payload = processAlerts(msg.payload,'GLOBAL');\n}\n\nreturn [msgPLANTALERT,msgWEATHERALERT,msgTOTAL, msg];",
      "outputs": 4,
      "noerr": 0,
      "x": 280,
      "y": 920,
      "wires": [
          [
              "11d14468.4d1a8c",
              "f304eab3.b991e8"
          ],
          [
              "8124d40c.ebdad8"
          ],
          [
              "38bee405.d8c95c"
          ],
          [
              "d2cc61d2.2b901"
          ]
      ]
  },
  {
      "id": "d49d8e62.51867",
      "type": "ui_template",
      "z": "11cdd89d.420ba7",
      "group": "6910c1e.662dc4",
      "name": "WeatherAlerts",
      "order": 0,
      "width": "24",
      "height": "6",
      "format": "<style>\n    {{msg.style}}\n</style>\n\n<table>\n  <tr ng-repeat=\"obj in msg.payload\">\n    <td>{{ obj.device }}</td>\n    <td>{{ obj.message }}</td>\n    <td>{{ obj.timestamp }}</td>\n  </tr>\n</table>",
      "storeOutMessages": true,
      "fwdInMessages": true,
      "templateScope": "local",
      "x": 820,
      "y": 920,
      "wires": [
          []
      ]
  },
  {
      "id": "52e2630e.d1622c",
      "type": "ui_template",
      "z": "11cdd89d.420ba7",
      "group": "21b345f7.4de84a",
      "name": "Alerts",
      "order": 0,
      "width": "24",
      "height": "6",
      "format": "<style>\n    {{msg.style}}\n</style>\n\n<table>\n  <tr ng-repeat=\"obj in msg.payload\">\n    <td>{{ obj.device }}</td>\n    <td>{{ obj.message }}</td>\n    <td>{{ obj.timestamp }}</td>\n  </tr>\n</table>",
      "storeOutMessages": true,
      "fwdInMessages": true,
      "templateScope": "local",
      "x": 790,
      "y": 980,
      "wires": [
          []
      ]
  },
  {
      "id": "5f92c3b4.7b491c",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "a32d6765.fbb618",
      "order": 0,
      "width": "4",
      "height": "2",
      "name": "",
      "label": "Temperature",
      "format": "{{msg.data.temperature}}",
      "layout": "col-center",
      "x": 1390,
      "y": 700,
      "wires": []
  },
  {
      "id": "a8cbf54b.cddab8",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "a32d6765.fbb618",
      "order": 0,
      "width": "4",
      "height": "2",
      "name": "",
      "label": "Humidity",
      "format": "{{msg.data.humidity}}",
      "layout": "col-center",
      "x": 1380,
      "y": 780,
      "wires": []
  },
  {
      "id": "8d3192f5.448d8",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "a32d6765.fbb618",
      "order": 0,
      "width": "4",
      "height": "2",
      "name": "",
      "label": "Soil Moisture",
      "format": "{{msg.data.sm}}",
      "layout": "col-center",
      "x": 1390,
      "y": 860,
      "wires": []
  },
  {
      "id": "e98d1399.0540e",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "a32d6765.fbb618",
      "order": 0,
      "width": "4",
      "height": "2",
      "name": "",
      "label": "Light",
      "format": "{{msg.data.light}}",
      "layout": "col-center",
      "x": 1370,
      "y": 940,
      "wires": []
  },
  {
      "id": "606daa0a.41c454",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "816c5956.92de08",
      "order": 0,
      "width": "3",
      "height": "2",
      "name": "",
      "label": "Temperature",
      "format": "{{msg.data.temperature}}",
      "layout": "col-center",
      "x": 1390,
      "y": 100,
      "wires": []
  },
  {
      "id": "4c87298b.8322b8",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "816c5956.92de08",
      "order": 0,
      "width": "3",
      "height": "2",
      "name": "",
      "label": "Humidity",
      "format": "{{msg.data.humidity}}",
      "layout": "col-center",
      "x": 1380,
      "y": 180,
      "wires": []
  },
  {
      "id": "1f31c468.97713c",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "816c5956.92de08",
      "order": 0,
      "width": "3",
      "height": "2",
      "name": "",
      "label": "Pressure",
      "format": "{{msg.data.pressure}}",
      "layout": "col-center",
      "x": 1380,
      "y": 260,
      "wires": []
  },
  {
      "id": "8f6135ba.2081d8",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "816c5956.92de08",
      "order": 0,
      "width": "3",
      "height": "2",
      "name": "",
      "label": "Rain",
      "format": "{{msg.data.rain}}",
      "layout": "col-center",
      "x": 1370,
      "y": 340,
      "wires": []
  },
  {
      "id": "97dc0a0f.818ba8",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "816c5956.92de08",
      "order": 0,
      "width": "3",
      "height": "2",
      "name": "",
      "label": "Light",
      "format": "{{msg.data.light}}",
      "layout": "col-center",
      "x": 1370,
      "y": 420,
      "wires": []
  },
  {
      "id": "ccd283a9.128e4",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "816c5956.92de08",
      "order": 0,
      "width": "3",
      "height": "2",
      "name": "",
      "label": "UV",
      "format": "{{msg.data.uv}}",
      "layout": "col-center",
      "x": 1370,
      "y": 500,
      "wires": []
  },
  {
      "id": "c3873331.4fa71",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "816c5956.92de08",
      "order": 0,
      "width": "6",
      "height": "2",
      "name": "",
      "label": "Last Value",
      "format": "{{msg.data.timestamp}}",
      "layout": "col-center",
      "x": 1390,
      "y": 580,
      "wires": []
  },
  {
      "id": "60a5b6e0.7f5df8",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "a32d6765.fbb618",
      "order": 0,
      "width": "4",
      "height": "2",
      "name": "",
      "label": "Last Value",
      "format": "{{msg.data.timestamp}}",
      "layout": "col-center",
      "x": 1390,
      "y": 1020,
      "wires": []
  },
  {
      "id": "74586daf.811b24",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "eef82205.89c55",
      "order": 4,
      "width": "4",
      "height": "2",
      "name": "WeatherStatusLastUpdated",
      "label": "Last Updated",
      "format": "{{msg.data.timestamp}}",
      "layout": "col-center",
      "x": 560,
      "y": 1120,
      "wires": []
  },
  {
      "id": "10b2a009.8e2f9",
      "type": "ui_text",
      "z": "11cdd89d.420ba7",
      "group": "eef82205.89c55",
      "order": 2,
      "width": "4",
      "height": "2",
      "name": "PlantStatusLastUpdated",
      "label": "Last Updated",
      "format": "{{msg.data.timestamp}}",
      "layout": "col-center",
      "x": 550,
      "y": 1280,
      "wires": []
  },
  {
      "id": "17d16cc.2e55193",
      "type": "inject",
      "z": "75747c34.950644",
      "name": "",
      "topic": "",
      "payload": "",
      "payloadType": "date",
      "repeat": "3600",
      "crontab": "",
      "once": true,
      "onceDelay": "10",
      "x": 110,
      "y": 140,
      "wires": [
          [
              "799f1a1e.fb51c4"
          ]
      ]
  },
  {
      "id": "ea780df7.84ef9",
      "type": "comment",
      "z": "75747c34.950644",
      "name": "Obtain Summary Data",
      "info": "",
      "x": 260,
      "y": 80,
      "wires": []
  },
  {
      "id": "9cdd54f0.139778",
      "type": "template",
      "z": "75747c34.950644",
      "name": "Summary Query Building",
      "field": "payload",
      "fieldType": "msg",
      "format": "handlebars",
      "syntax": "mustache",
      "template": "select device,device_type, \n\tdata::json->'uv'::text as uv,\n\tdata::json->'light'::text as light,\n\tdata::json->'sm'::text as sm,\n\tdata::json->'rain'::text as rain,\n\tdata::json->'pressure'::text as pressure,\n\tdata::json->'humidity'::text as humidity,\n\tdata::json->>'temperature'::text as temperature,\n\tto_char(to_timestamp(gw_time/ 1000),'DD/MM/YYYY') as data_time\nfrom telemetry\n\twhere gw_time>$timestamp",
      "output": "str",
      "x": 370,
      "y": 140,
      "wires": [
          [
              "b82d4ebb.26b89"
          ]
      ]
  },
  {
      "id": "799f1a1e.fb51c4",
      "type": "function",
      "z": "75747c34.950644",
      "name": "Prepare summary",
      "func": "msg.connectName = 'postgres';\nmsg.queryParameters = msg.queryParameters || {};\n\nmsg.queryParameters.timestamp = new Date(new Date() - 7*24*60*60*1000).getTime();\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 210,
      "y": 240,
      "wires": [
          [
              "9cdd54f0.139778"
          ]
      ]
  },
  {
      "id": "b82d4ebb.26b89",
      "type": "postgres",
      "z": "75747c34.950644",
      "postgresdb": "331b1283.e8b0de",
      "name": "SummaryQuery",
      "output": true,
      "outputs": 1,
      "x": 480,
      "y": 260,
      "wires": [
          [
              "370883ee.3e66ec"
          ]
      ]
  },
  {
      "id": "370883ee.3e66ec",
      "type": "function",
      "z": "75747c34.950644",
      "name": "Process Summary",
      "func": "var groupBy = function(input, key) {\n    var result = {};\n    for (const val of input) {\n        mapElement = result[val[key]];\n        if (mapElement) {\n            mapElement.push(val);\n        } else {\n            mapElement = [];\n            mapElement.push(val);\n            result[val[key]] = mapElement;\n        } \n    }\n    return result;\n};\n\n\nfunction processValues(deviceType,input) {\n    var result = {};\n    \n    for (const val of Object.getOwnPropertyNames(input)) {\n        let nElements = input[val].length;\n        for (const value of input[val]) {\n        mapElement = result[val];\n        if ('PLANT' == deviceType) {\n        if (!mapElement) {\n            mapElement = {};\n            mapElement.temperature = parseFloat(value.temperature)/nElements;\n            mapElement.humidity = parseFloat(value.humidity)/nElements;\n            mapElement.light = parseFloat(value.light)/nElements;\n            mapElement.sm = parseFloat(value.sm)/nElements;\n            result[val] = mapElement;\n        } else {\n            mapElement.temperature += parseFloat(value.temperature)/nElements;\n            mapElement.humidity += parseFloat(value.humidity)/nElements;\n            mapElement.light += parseFloat(value.light)/nElements;\n            mapElement.sm += parseFloat(value.sm)/nElements;\n        }\n        }\n        else if ('WEATHER' == deviceType) {\n        if (!mapElement) {\n            mapElement = {};\n            mapElement.temperature = parseFloat(value.temperature)/nElements;\n            mapElement.humidity = parseFloat(value.humidity)/nElements;\n            mapElement.light = parseFloat(value.light)/nElements;\n             mapElement.uv = parseFloat(value.uv)/nElements;\n             mapElement.pressure = parseFloat(value.pressure)/nElements;\n             mapElement.rain = parseFloat(value.rain)/nElements;\n            result[val] = mapElement;\n        } else {\n            mapElement.temperature += parseFloat(value.temperature)/nElements;\n            mapElement.humidity += parseFloat(value.humidity)/nElements;\n            mapElement.light += parseFloat(value.light)/nElements;\n            mapElement.light = parseFloat(value.light)/nElements;\n             mapElement.uv += parseFloat(value.uv)/nElements;\n             mapElement.pressure += parseFloat(value.pressure)/nElements;\n             mapElement.rain += parseFloat(value.rain)/nElements;\n        }\n        }\n        }\n    }\n    \n    return result;\n};\n\nvar data = msg.payload;\n\nvar content = groupBy(data,'device_type');\n\nfor (const deviceType of Object.getOwnPropertyNames(content)) {\n    node.warn(deviceType);\n    content[deviceType] = groupBy(content[deviceType],'data_time');\n    msg[deviceType] = processValues(deviceType,content[deviceType]);\n}\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 670,
      "y": 140,
      "wires": [
          [
              "656badd5.36e284"
          ]
      ]
  },
  {
      "id": "656badd5.36e284",
      "type": "link out",
      "z": "75747c34.950644",
      "name": "summaryData",
      "links": [
          "70c5e645.dcfcb8"
      ],
      "x": 835,
      "y": 40,
      "wires": []
  },
  {
      "id": "70c5e645.dcfcb8",
      "type": "link in",
      "z": "11cdd89d.420ba7",
      "name": "",
      "links": [
          "656badd5.36e284"
      ],
      "x": 635,
      "y": 80,
      "wires": [
          [
              "97fbf027.1b4cf"
          ]
      ]
  },
  {
      "id": "f304eab3.b991e8",
      "type": "debug",
      "z": "11cdd89d.420ba7",
      "name": "ALERTS",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "true",
      "targetType": "full",
      "x": 580,
      "y": 700,
      "wires": []
  },
  {
      "id": "97fbf027.1b4cf",
      "type": "function",
      "z": "11cdd89d.420ba7",
      "name": "Prepare Summaries",
      "func": "function process(input) {\n    var result = {\n        series:[],\n        data:[],\n        labels:[]\n    };\n    //Extracting labels\n    for (const val of Object.getOwnPropertyNames(input)) {\n        result.labels.push(val);\n\n        //Extracting name series\n        for (const key of Object.getOwnPropertyNames(input[val])) {\n            var pos = result.series.indexOf(key);\n            var values = [];\n            if (pos<0) {\n                result.series.push(key);\n                result.data.push(values);\n            } else {\n                values = result.data[pos];\n            }\n            values.push(input[val][key]);\n        }\n    }\n    return [result];\n}\n\nvar msgTest = {};\n\nmsgTest.payload = [{\n    \"series\": [\"X\", \"Y\", \"A\"],\n    \"data\": [ [5.54,6], [3,8] ,[1,1]],\n    \"labels\": [ \"Jan\", \"Feb\", \"Mar\"]\n}];\n\nvar msgPLANT = {}\nif (msg.PLANT) {\nmsgPLANT.payload = process(msg.PLANT);\n}\nvar msgWEATHER = {}\nif (msg.WEATHER) {\nmsgWEATHER.payload = process(msg.WEATHER);\n}\nnode.warn(msgWEATHER);\nreturn [msgWEATHER,msgPLANT];",
      "outputs": 2,
      "noerr": 0,
      "x": 790,
      "y": 80,
      "wires": [
          [
              "b182f905.f2a008"
          ],
          [
              "bdbdcf0.611ff3"
          ]
      ]
  },
  {
      "id": "60d94a08.ebec34",
      "type": "inject",
      "z": "75747c34.950644",
      "name": "",
      "topic": "",
      "payload": "",
      "payloadType": "date",
      "repeat": "300",
      "crontab": "",
      "once": true,
      "onceDelay": "30",
      "x": 110,
      "y": 360,
      "wires": [
          [
              "2b1887b9.4973a8"
          ]
      ]
  },
  {
      "id": "2b1887b9.4973a8",
      "type": "function",
      "z": "75747c34.950644",
      "name": "Prepare Telemetry",
      "func": "msg.connectName = 'postgres';\nmsg.queryParameters = msg.queryParameters || {};\n\nvar timestamp = flow.get(\"telemetryTimestamp\");\n\n//Last two days\nif (timestamp) {\n   timestamp = new Date(new Date() - 2*24*60*60*1000).getTime()     \n}\nflow.set(\"telemetryTimestamp\",new Date().getTime()); \n\nmsg.queryParameters.timestamp = timestamp;\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 190,
      "y": 440,
      "wires": [
          [
              "30790af8.414c46"
          ]
      ]
  },
  {
      "id": "30790af8.414c46",
      "type": "template",
      "z": "75747c34.950644",
      "name": "Telemetry Query Building",
      "field": "payload",
      "fieldType": "msg",
      "format": "handlebars",
      "syntax": "mustache",
      "template": "select device,device_type, \n\tdata::json->>'uv'::text as uv,\n\tdata::json->>'light'::text as light,\n\tdata::json->>'sm'::text as sm,\n\tdata::json->>'rain'::text as rain,\n\tdata::json->>'pressure'::text as pressure,\n\tdata::json->>'humidity'::text as humidity,\n\tdata::json->>'temperature'::text as temperature,\n\tgw_time as data_time\nfrom telemetry\n\twhere gw_time>$timestamp\n\torder by gw_time desc\n\tlimit 100",
      "output": "str",
      "x": 370,
      "y": 500,
      "wires": [
          [
              "efc679e9.602bb8"
          ]
      ]
  },
  {
      "id": "efc679e9.602bb8",
      "type": "postgres",
      "z": "75747c34.950644",
      "postgresdb": "331b1283.e8b0de",
      "name": "TelemetryQuery",
      "output": true,
      "outputs": 1,
      "x": 520,
      "y": 420,
      "wires": [
          [
              "afc636e1.428df8"
          ]
      ]
  },
  {
      "id": "afc636e1.428df8",
      "type": "function",
      "z": "75747c34.950644",
      "name": "Process Telemetry",
      "func": "var groupBy = function(input, key) {\n    var result = {};\n    for (const val of input) {\n        mapElement = result[val[key]];\n        if (mapElement) {\n            mapElement.push(val);\n        } else {\n            mapElement = [];\n            mapElement.push(val);\n            result[val[key]] = mapElement;\n        } \n    }\n    return result;\n};\n\n\nfunction processValues(deviceType,input) {\n    var result = [];\n    for (const value of input) {\n        var mapElement = {};\n        if ('PLANT' == deviceType) {\n            mapElement = {};\n            mapElement.temperature = parseFloat(value.temperature);\n            mapElement.humidity = parseFloat(value.humidity);\n            mapElement.light = parseFloat(value.light);\n            mapElement.sm = parseFloat(value.sm);\n            mapElement.data_time = parseInt(value.data_time);\n        }\n        else if ('WEATHER' == deviceType) {\n            mapElement = {};\n            mapElement.temperature = parseFloat(value.temperature);\n            mapElement.humidity = parseFloat(value.humidity);\n            mapElement.light = parseFloat(value.light);\n             mapElement.uv = parseFloat(value.uv);\n             mapElement.pressure = parseFloat(value.pressure);\n             mapElement.rain = parseFloat(value.rain);\n             mapElement.data_time = parseInt(value.data_time);\n        } \n        result.push(mapElement);\n    }\n    return result;\n};\n\nfunction getLast(input) {\n    var result;\n    if (input && Array.isArray(input) && input.length>0) {\n      result = input[0];  \n    }\n    return result;\n}\n\nvar data = msg.payload;\n\nvar content = groupBy(data,'device_type');\nfor (const deviceType of Object.getOwnPropertyNames(content)) {\n    msg[deviceType] = processValues(deviceType,content[deviceType]);\n    msg['LAST_'+deviceType] = getLast(msg[deviceType]);\n}\n\nvar msgTest = {};\nmsgTest.payload = \n[{\n\"series\": [\"A\", \"B\", \"C\"],\n\"topic\": [\"TA\", \"TB\", \"TC\"],\n\"data\": [\n    [{ \"x\": 1504029632890, \"y\": 5 },\n     { \"x\": 1504029636001, \"y\": 4 },\n     { \"x\": 1504029638656, \"y\": 2 }\n    ],\n    [{ \"x\": 1504029633514, \"y\": 6 },\n     { \"x\": 1504029636622, \"y\": 7 },\n     { \"x\": 1504029639539, \"y\": 6 }\n    ],\n    [{ \"x\": 1504029634400, \"y\": 7 },\n     { \"x\": 1504029637959, \"y\": 7 },\n     { \"x\": 1504029640317, \"y\": 7 }\n    ]\n],\n\"labels\": [\"Az\",\"Bz\",\"Cz\"]\n}];\n\n\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 710,
      "y": 320,
      "wires": [
          [
              "70567261.3be40c"
          ]
      ]
  },
  {
      "id": "70567261.3be40c",
      "type": "link out",
      "z": "75747c34.950644",
      "name": "telemetryData",
      "links": [
          "a9ff975c.204158"
      ],
      "x": 980,
      "y": 320,
      "wires": []
  },
  {
      "id": "744cc758.458b38",
      "type": "function",
      "z": "11cdd89d.420ba7",
      "name": "Prepare Telemetry",
      "func": "function processTimeSerie(data, timeLabel) {\n    var result = {\n        series:[],\n        data:[],\n        topics:[],\n        labels:[]\n    };\n    //Extracting labels\n    for (const input of data) {\n    for (const val of Object.getOwnPropertyNames(input)) {\n        if (timeLabel !== val) {\n        var pos = result.labels.indexOf(val);\n        if (pos<0) {\n            result.labels.push(val);\n            result.series.push(val);\n            result.topics.push(val);\n            result.data.push([]);\n            pos = result.labels.length-1;\n        }\n        value= {\n            x : input[timeLabel],\n            y : input[val]\n        };\n        result.data[pos].push(value)\n        }\n        //build element and add\n    }\n    }\n    return [result];\n}\n\nvar msgTest = {};\nmsgTest.payload = \n[{\n\"series\": [\"A\", \"B\", \"C\"],\n\"topic\": [\"TA\", \"TB\", \"TC\"],\n\"data\": [\n    [{ \"x\": 1504029632890, \"y\": 5 },\n     { \"x\": 1504029636001, \"y\": 4 },\n     { \"x\": 1504029638656, \"y\": 2 }\n    ],\n    [{ \"x\": 1504029633514, \"y\": 6 },\n     { \"x\": 1504029636622, \"y\": 7 },\n     { \"x\": 1504029639539, \"y\": 6 }\n    ],\n    [{ \"x\": 1504029634400, \"y\": 7 },\n     { \"x\": 1504029637959, \"y\": 7 },\n     { \"x\": 1504029640317, \"y\": 7 }\n    ]\n],\n\"labels\": [\"Az\",\"Bz\",\"Cz\"]\n}];\n\n\nvar msgPLANT = {}\nif (msg.PLANT) {\nmsgPLANT.payload = processTimeSerie(msg.PLANT, \"data_time\");\n}\nvar msgWEATHER = {}\nif (msg.WEATHER) {\nmsgWEATHER.payload = processTimeSerie(msg.WEATHER, \"data_time\");\n}\nvar msgLAST_PLANT;\nif (msg.LAST_PLANT) {\n    msgLAST_PLANT = {};\nmsgLAST_PLANT.data = msg.LAST_PLANT;\n}\nvar msgLAST_WEATHER;\nif (msg.LAST_WEATHER) {\n    msgLAST_WEATHER = {};\nmsgLAST_WEATHER.data = msg.LAST_WEATHER;\n}\n\nreturn [msgWEATHER,msgPLANT,msgLAST_WEATHER, msgLAST_PLANT];",
      "outputs": 4,
      "noerr": 0,
      "x": 810,
      "y": 200,
      "wires": [
          [
              "2ab53122.adde5e"
          ],
          [
              "9f80c5e3.3fc328"
          ],
          [
              "1a1e3f90.3fe4a"
          ],
          [
              "1a75f65.8bb520a"
          ]
      ]
  },
  {
      "id": "a9ff975c.204158",
      "type": "link in",
      "z": "11cdd89d.420ba7",
      "name": "",
      "links": [
          "70567261.3be40c"
      ],
      "x": 615,
      "y": 200,
      "wires": [
          [
              "744cc758.458b38"
          ]
      ]
  },
  {
      "id": "1a1e3f90.3fe4a",
      "type": "function",
      "z": "11cdd89d.420ba7",
      "name": "processLastWeather",
      "func": "if (msg.data && msg.data.data_time) {\n    msg.data.timestamp = new Date(msg.data.data_time).toLocaleString();\n}\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 1120,
      "y": 340,
      "wires": [
          [
              "606daa0a.41c454",
              "4c87298b.8322b8",
              "1f31c468.97713c",
              "8f6135ba.2081d8",
              "97dc0a0f.818ba8",
              "ccd283a9.128e4",
              "c3873331.4fa71",
              "d7e91699.e53d38",
              "c369fc.3d9e4608",
              "3e6867d3.467dd8",
              "718b829e.cf9c4c",
              "7a00fa6c.4c7094",
              "7ee082eb.591efc",
              "8eb5619.0d6e8a"
          ]
      ]
  },
  {
      "id": "1a75f65.8bb520a",
      "type": "function",
      "z": "11cdd89d.420ba7",
      "name": "processLastPlant",
      "func": "if (msg.data && msg.data.data_time) {\n    msg.data.timestamp = new Date(msg.data.data_time).toLocaleString();\n}\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 1090,
      "y": 860,
      "wires": [
          [
              "5f92c3b4.7b491c",
              "e290f47f.3e3e28",
              "a8cbf54b.cddab8",
              "13a566d.80eb499",
              "8d3192f5.448d8",
              "14c31def.bed932",
              "e98d1399.0540e",
              "7255e0cf.e6ed8",
              "60a5b6e0.7f5df8",
              "502bc06e.29f07"
          ]
      ]
  },
  {
      "id": "c226430.29efcc",
      "type": "comment",
      "z": "75747c34.950644",
      "name": "Obtain Telemetry",
      "info": "",
      "x": 260,
      "y": 300,
      "wires": []
  },
  {
      "id": "60ecb4db.7225ec",
      "type": "inject",
      "z": "75747c34.950644",
      "name": "",
      "topic": "",
      "payload": "",
      "payloadType": "date",
      "repeat": "180",
      "crontab": "",
      "once": true,
      "onceDelay": "20",
      "x": 90,
      "y": 620,
      "wires": [
          [
              "15f852f3.57709d"
          ]
      ]
  },
  {
      "id": "15f852f3.57709d",
      "type": "function",
      "z": "75747c34.950644",
      "name": "Prepare Alert",
      "func": "msg.connectName = 'postgres';\nmsg.queryParameters = msg.queryParameters || {};\n\nvar timestamp = flow.get(\"alertTimestamp\");\n\n//Last two days\nif (!timestamp) {\n   timestamp = new Date(new Date() - 2*24*60*60*1000).getTime()     \n}\nflow.set(\"alertTimestamp\",new Date().getTime()); \n\nmsg.queryParameters.timestamp = timestamp;\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 190,
      "y": 680,
      "wires": [
          [
              "683d823a.ea7fac"
          ]
      ]
  },
  {
      "id": "683d823a.ea7fac",
      "type": "template",
      "z": "75747c34.950644",
      "name": "Alerts Query Building",
      "field": "payload",
      "fieldType": "msg",
      "format": "handlebars",
      "syntax": "mustache",
      "template": "select edge_time as data_time,device_type,device,message from alert\nwhere edge_time > $timestamp\norder by edge_time desc\nlimit 20\n",
      "output": "str",
      "x": 400,
      "y": 760,
      "wires": [
          [
              "2c68f8a4.2dc428"
          ]
      ]
  },
  {
      "id": "2c68f8a4.2dc428",
      "type": "postgres",
      "z": "75747c34.950644",
      "postgresdb": "331b1283.e8b0de",
      "name": "AlertQuery",
      "output": true,
      "outputs": 1,
      "x": 510,
      "y": 640,
      "wires": [
          [
              "c599946.b454868"
          ]
      ]
  },
  {
      "id": "82d1618d.85a1",
      "type": "comment",
      "z": "75747c34.950644",
      "name": "Obtain Alerts",
      "info": "",
      "x": 230,
      "y": 560,
      "wires": []
  },
  {
      "id": "c599946.b454868",
      "type": "function",
      "z": "75747c34.950644",
      "name": "Process Alerts",
      "func": "var groupBy = function(input, key) {\n    var result = {};\n    for (const val of input) {\n        mapElement = result[val[key]];\n        if (mapElement) {\n            mapElement.push(val);\n        } else {\n            mapElement = [];\n            mapElement.push(val);\n            result[val[key]] = mapElement;\n        } \n    }\n    return result;\n};\n\n\nfunction processData(data) {\n    var result = data;\n    for (const val of data) \n    {\n        if (val['data_time']) {\n            val.timestamp = new Date(parseInt(val['data_time'])).toLocaleString();\n        }\n    }\n    return result;\n};\n\nfunction getLast(input) {\n    var result;\n    if (input && Array.isArray(input) && input.length>0) {\n      result = input[0];  \n    }\n    return result;\n}\n\nvar data = processData(msg.payload);\nmsg.payload = data;\nvar content = groupBy(data,'device_type');\nfor (const deviceType of Object.getOwnPropertyNames(content)) {\n    msg[deviceType] = content[deviceType];\n}\n\nvar msgTest = {};\nmsgTest.payload = \n[{\n\"series\": [\"A\", \"B\", \"C\"],\n\"topic\": [\"TA\", \"TB\", \"TC\"],\n\"data\": [\n    [{ \"x\": 1504029632890, \"y\": 5 },\n     { \"x\": 1504029636001, \"y\": 4 },\n     { \"x\": 1504029638656, \"y\": 2 }\n    ],\n    [{ \"x\": 1504029633514, \"y\": 6 },\n     { \"x\": 1504029636622, \"y\": 7 },\n     { \"x\": 1504029639539, \"y\": 6 }\n    ],\n    [{ \"x\": 1504029634400, \"y\": 7 },\n     { \"x\": 1504029637959, \"y\": 7 },\n     { \"x\": 1504029640317, \"y\": 7 }\n    ]\n],\n\"labels\": [\"Az\",\"Bz\",\"Cz\"]\n}];\n\n\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 780,
      "y": 640,
      "wires": [
          [
              "3c000165.d57dce"
          ]
      ]
  },
  {
      "id": "3c000165.d57dce",
      "type": "link out",
      "z": "75747c34.950644",
      "name": "Alerts",
      "links": [
          "bb12e916.dbbf38"
      ],
      "x": 980,
      "y": 640,
      "wires": []
  },
  {
      "id": "bb12e916.dbbf38",
      "type": "link in",
      "z": "11cdd89d.420ba7",
      "name": "alerts",
      "links": [
          "3c000165.d57dce"
      ],
      "x": 75,
      "y": 920,
      "wires": [
          [
              "16da5e9.be331a1"
          ]
      ]
  },
  {
      "id": "8124d40c.ebdad8",
      "type": "template",
      "z": "11cdd89d.420ba7",
      "name": "css",
      "field": "style",
      "fieldType": "msg",
      "format": "html",
      "syntax": "mustache",
      "template": "table {\n    color: #333;\n    font-family: Helvetica, Arial, sans-serif;\n    width: 100%;\n    border-collapse: collapse;\n    border-spacing: 0;\n}\ntd, th {\n    border: 1px solid transparent;\n    /* No more visible border */\n    height: 30px;\n    transition: all 0.3s;\n    /* Simple transition for hover effect */\n}\nth {\n    background: #DFDFDF;\n    /* Darken header a bit */\n    font-weight: bold;\n}\ntd {\n    background: #FAFAFA;\n    text-align: center;\n}\n\n/* Cells in even rows (2,4,6...) are one color */\n\ntr:nth-child(even) td {\n    background: #F1F1F1;\n}\n\n/* Cells in odd rows (1,3,5...) are another (excludes header cells)  */\n\ntr:nth-child(odd) td {\n    background: #FEFEFE;\n}\ntr td:hover {\n    background: #666;\n    color: #FFF;\n}\n\n/* Hover cell effect! */",
      "x": 590,
      "y": 920,
      "wires": [
          [
              "d49d8e62.51867"
          ]
      ]
  },
  {
      "id": "38bee405.d8c95c",
      "type": "template",
      "z": "11cdd89d.420ba7",
      "name": "css",
      "field": "style",
      "fieldType": "msg",
      "format": "html",
      "syntax": "mustache",
      "template": "table {\n    color: #333;\n    font-family: Helvetica, Arial, sans-serif;\n    width: 100%;\n    border-collapse: collapse;\n    border-spacing: 0;\n}\ntd, th {\n    border: 1px solid transparent;\n    /* No more visible border */\n    height: 30px;\n    transition: all 0.3s;\n    /* Simple transition for hover effect */\n}\nth {\n    background: #DFDFDF;\n    /* Darken header a bit */\n    font-weight: bold;\n}\ntd {\n    background: #FAFAFA;\n    text-align: center;\n}\n\n/* Cells in even rows (2,4,6...) are one color */\n\ntr:nth-child(even) td {\n    background: #F1F1F1;\n}\n\n/* Cells in odd rows (1,3,5...) are another (excludes header cells)  */\n\ntr:nth-child(odd) td {\n    background: #FEFEFE;\n}\ntr td:hover {\n    background: #666;\n    color: #FFF;\n}\n\n/* Hover cell effect! */",
      "x": 590,
      "y": 980,
      "wires": [
          [
              "52e2630e.d1622c"
          ]
      ]
  },
  {
      "id": "2e08392f.f6a386",
      "type": "comment",
      "z": "75747c34.950644",
      "name": "Obtain Status",
      "info": "",
      "x": 230,
      "y": 840,
      "wires": []
  },
  {
      "id": "251de2a.cbbec1e",
      "type": "inject",
      "z": "75747c34.950644",
      "name": "",
      "topic": "",
      "payload": "",
      "payloadType": "date",
      "repeat": "120",
      "crontab": "",
      "once": true,
      "onceDelay": "40",
      "x": 90,
      "y": 880,
      "wires": [
          [
              "d0641df8.ab758"
          ]
      ]
  },
  {
      "id": "d0641df8.ab758",
      "type": "function",
      "z": "75747c34.950644",
      "name": "Prepare Status",
      "func": "msg.connectName = 'postgres';\nmsg.queryParameters = msg.queryParameters || {};\n\nvar timestamp = flow.get(\"statusTimestamp\");\n\n//Last two days\nif (timestamp) {\n   timestamp = new Date(new Date() - 2*24*60*60*1000).getTime()     \n}\nflow.set(\"statusTimestamp\",new Date().getTime()); \n\nmsg.queryParameters.timestamp = timestamp;\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 260,
      "y": 920,
      "wires": [
          [
              "ddcf3220.17629"
          ]
      ]
  },
  {
      "id": "ddcf3220.17629",
      "type": "template",
      "z": "75747c34.950644",
      "name": "Status Query Building",
      "field": "payload",
      "fieldType": "msg",
      "format": "handlebars",
      "syntax": "mustache",
      "template": "select\n    a.device, a.status,a.device_type, a.edge_time\nfrom\n    status a\n    inner join \n        (select device, max(id) as maxid from status \n        group by device) as b on\n        a.id = b.maxid",
      "output": "str",
      "x": 440,
      "y": 980,
      "wires": [
          [
              "1aecfa2f.74b956"
          ]
      ]
  },
  {
      "id": "1aecfa2f.74b956",
      "type": "postgres",
      "z": "75747c34.950644",
      "postgresdb": "331b1283.e8b0de",
      "name": "StatusQuery",
      "output": true,
      "outputs": 1,
      "x": 650,
      "y": 900,
      "wires": [
          [
              "512bc892.e3e3b8"
          ]
      ]
  },
  {
      "id": "91fb56ae.1ffeb8",
      "type": "link out",
      "z": "75747c34.950644",
      "name": "statusData",
      "links": [
          "f134e6f4.54eac8"
      ],
      "x": 975,
      "y": 840,
      "wires": []
  },
  {
      "id": "f134e6f4.54eac8",
      "type": "link in",
      "z": "11cdd89d.420ba7",
      "name": "",
      "links": [
          "91fb56ae.1ffeb8"
      ],
      "x": 135,
      "y": 1180,
      "wires": [
          [
              "3e775cbf.179b24"
          ]
      ]
  },
  {
      "id": "2846ee91.ea9632",
      "type": "inject",
      "z": "11cdd89d.420ba7",
      "name": "",
      "topic": "",
      "payload": "",
      "payloadType": "date",
      "repeat": "60",
      "crontab": "",
      "once": true,
      "onceDelay": 0.1,
      "x": 110,
      "y": 80,
      "wires": [
          [
              "3077add2.db1a52"
          ]
      ]
  },
  {
      "id": "3077add2.db1a52",
      "type": "function",
      "z": "11cdd89d.420ba7",
      "name": "Format Time Stamp",
      "func": "if (msg.payload) {\n    msg.payload = new Date(msg.payload).toLocaleString();\n}\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 300,
      "y": 80,
      "wires": [
          [
              "bbcba078.b1a1f"
          ]
      ]
  },
  {
      "id": "512bc892.e3e3b8",
      "type": "function",
      "z": "75747c34.950644",
      "name": "Process Status",
      "func": "function processData(data) {\n    var result = data;\n    for (const val of data) \n    {\n        if (val['edge_time']) {\n            val.timestamp = new Date(parseInt(val['edge_time'])).toLocaleString();\n        }\n    }\n    return result;\n};\n\n\nif (msg.payload) {\nvar data = processData(msg.payload);\nmsg.payload = data;\n}\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 820,
      "y": 840,
      "wires": [
          [
              "91fb56ae.1ffeb8"
          ]
      ]
  },
  {
      "id": "3e775cbf.179b24",
      "type": "function",
      "z": "11cdd89d.420ba7",
      "name": "processStatus",
      "func": "const INACTITIY_PERIOD = 15*60*1000;\nvar data = msg.payload;\nvar msgWEATHER_STATUS, msgPLANT_STATUS;\n\nif (data) {\n    for (const val of data) {\n        val.color = 'lime';\n        if (!val.status || (new Date().getTime() - parseInt(val.edge_time)) > INACTITIY_PERIOD) {\n            val.color = 'red';\n        }\n        if ('PLANT' === val.device_type) {\n            msgPLANT_STATUS = {};\n            msgPLANT_STATUS.data = val;\n        } else {\n            msgWEATHER_STATUS = {};\n            msgWEATHER_STATUS.data = val;\n        }\n    }\n}\n\nreturn [msgWEATHER_STATUS, msgPLANT_STATUS];",
      "outputs": 2,
      "noerr": 0,
      "x": 300,
      "y": 1180,
      "wires": [
          [
              "a7b245aa.a1e238",
              "74586daf.811b24"
          ],
          [
              "c95d16e8.466af8",
              "10b2a009.8e2f9"
          ]
      ]
  },
  {
      "id": "9740a5f0.a0cc48",
      "type": "debug",
      "z": "11cdd89d.420ba7",
      "name": "",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "x": 270,
      "y": 1060,
      "wires": []
  },
  {
      "id": "d2cc61d2.2b901",
      "type": "function",
      "z": "11cdd89d.420ba7",
      "name": "processAlertMessage",
      "func": "var data = msg.payload;\n\nif (msg.payload && Array.isArray(msg.payload)) {\n    for (const alert of msg.payload) {\n        var alertMessage = {};\n        alertMessage.topic = \"ALERT\";\n        alertMessage.payload = \"[\"+alert.timestamp+\"] \" + alert.device+\":\"+alert.message;\n        node.send(alertMessage);\n    }\n    \n}\n",
      "outputs": 1,
      "noerr": 0,
      "x": 400,
      "y": 740,
      "wires": [
          [
              "d5ebab47.ea9db8"
          ]
      ]
  }
]